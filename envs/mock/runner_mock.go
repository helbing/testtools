// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	testing "testing"

	gomock "github.com/golang/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Down mocks base method.
func (m *MockRunner) Down(tb testing.TB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Down", tb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Down indicates an expected call of Down.
func (mr *MockRunnerMockRecorder) Down(tb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Down", reflect.TypeOf((*MockRunner)(nil).Down), tb)
}

// Up mocks base method.
func (m *MockRunner) Up(tb testing.TB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Up", tb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Up indicates an expected call of Up.
func (mr *MockRunnerMockRecorder) Up(tb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockRunner)(nil).Up), tb)
}
